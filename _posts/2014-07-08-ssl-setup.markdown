---
layout: post
status: publish
published: true
title: SSL Setup
date: !binary |-
  MjAxNC0wNy0wOCAxNDo0MjowNSAtMDQwMA==
date_gmt: !binary |-
  MjAxNC0wNy0wOCAwNDo0MjowNSAtMDQwMA==
---
### forward secrecy

> In cryptography, forward secrecy (abbreviation: FS, also known as perfect forward secrecy or PFS) is a property of key-agreement protocols ensuring that a session key derived from a set of long-term keys cannot be compromised if one of the long-term keys is compromised in the future. The key used to protect transmission of data must not be used to derive any additional keys, and if the key used to protect transmission of data is derived from some other keying material, then that material must not be used to derive any more keys. In this way, compromise of a single key permits access only to data protected by that single key.
>
> -- <a href="http://en.wikipedia.org/wiki/Forward_secrecy" title="Wikipedia" target="_blank">http://en.wikipedia.org/wiki/Forward_secrecy</a>


### beast attack vs poor rc4 encryption

BEAST, aka Browser Exploit Against SSL/TLS exploits a long-known cipher block chaining (CBC) vulnerability in TLS 1.0. This vulnerability has been known about since 2002 but wasn't properly exploited until 2011. Newer browsers already have enabled client side mitigation for the BEAST attack. As the solution to disable sessions from the BEAST attack is to disable TLS 1.0 entirely and only offer RC4 it leaves us with a little bit of a problem. RC4 encryption has been brought into <a href="http://www.isg.rhul.ac.uk/tls/" target="_blank">question</a> since the NSA has announced a "<a href="http://www.economist.com/blogs/babbage/2013/09/breaking-cryptography" target="_blank">big breakthrough</a>" when dealing with it's encryption. Also if we disable RC4 older browsers will fall back to 3DES which is more expensive on server resources. However, 3DES does offer superior protection for users sessions. 

With better client-side mitigation being implemented it's believed that BEAST is a non-issue and by disabling TLS 1.0 we could be opening ourselves up to larger problems in the future.


### crime and breach attacks

The authors of the BEAST attack are also the creators of the later CRIME attack, which can allow an attacker to recover the content of web cookies when data compression is used along with TLS. When used to recover the content of secret authentication cookies, it allows an attacker to perform session hijacking on an authenticated web session.

It is suggested to disable SSL compression.


### sslv2 and sslv3

SSLv2 & SSLv3 are insecure. With SSLv3 support enabled a user can exploit a TLS 1.0 downgrade attack, which would allow an attacker to force a connection to use SSLv3 and therefore disable perfect forward secrecy (PFS).


### the cipher suite

Forward Secrecy ensures the integrity of a session key in the event that a long-term key is compromised. PFS accomplishes this by enforcing the derivation of a new key for each and every session.

This means that when the private key gets compromised it cannot be used to decrypt recorded SSL traffic.

The cipher suites that provide Perfect Forward Secrecy are those that use an ephemeral form of the Diffie-Hellman key exchange. Their disadvantage is their overhead, which can be improved by using the elliptic curve variants.

This is a recommended cipher suite if you need to support older software like IE 6, 7 or 8:

{% highlight bash %}
ssl.cipher-list = "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4"
{% endhighlight %}

In short, the above cipher suite:

* Provides forward secrecy to most reasonably modern clients
* Provides improved security as more clients enable TLS 1.2
* Provides some security for people stuck on Windows XP or IE 6, 7 and 8 (which is still a large percentage of traffic)


### config examples

#### lighttpd

{% highlight bash %}
var.confdir = "/etc/ssl/certs"
$SERVER["socket"] == ":443" {
  ssl.engine = "enable"
  ssl.pemfile = var.confdir + "/example.org.pem"
  ssl.ca-file = var.confdir + "/example.org.bundle.crt"
  server.name = var.confdir + "/example.org"
  server.document-root = "/srv/html"
  ssl.use-sslv2 = "disable"
  ssl.use-sslv3 = "disable"
  ssl.use-compression = "disable"
  ssl.honor-cipher-order = "enable"
  ssl.cipher-list = "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4"
}
{% endhighlight %}


#### nginx

{% highlight bash %}
server {
  listen [::]:443 default_server;
  ssl on;
  ssl_certificate_key /etc/ssl/cert/dodwell.us.pem;
  ssl_certificate /etc/ssl/cert/ca-bundle.pem;
  ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4';
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_session_cache  builtin:1000  shared:SSL:10m;
  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.4.4 8.8.8.8 valid=300s;
  resolver_timeout 10s;
  ssl_prefer_server_ciphers on;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;
  add_header Strict-Transport-Security max-age=63072000;
  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff;
  root /var/www/;
  index index.html index.htm;
  server_name dodwell.us;
}
{% endhighlight %}


#### apache

* Ensure your running Apache v2.4.7+ as it has fixes to deal with Diffie-Hellman parameters.

{% highlight bash %}
SSLProtocol -ALL +TLSv1 +TLSv1.1 +TLSv1.2
SSLHonorCipherOrder on
SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
SSLUseStapling on
SSLStaplingCache &ldquo;shmcb:logs/stapling_cache(128000)&rdquo;
{% endhighlight %}

 
### testing
<a href="https://www.ssllabs.com/ssltest/">https://www.ssllabs.com/ssltest/</a>
